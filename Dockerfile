# Use uma imagem base oficial do Node.js com Alpine para menor tamanho
FROM node:20-alpine AS base

# Definir diretÃ³rio de trabalho
WORKDIR /app

# Instalar dependÃªncias do sistema necessÃ¡rias para o Prisma e outras bibliotecas nativas
RUN apk add --no-cache \
    openssl \
    libc6-compat \
    postgresql-client

# ===============================
# EstÃ¡gio de dependÃªncias
# ===============================
FROM base AS deps

# Copiar arquivos de configuraÃ§Ã£o de dependÃªncias
COPY package.json package-lock.json* ./

# Instalar dependÃªncias
RUN npm ci --only=production && npm cache clean --force

# ===============================
# EstÃ¡gio de build
# ===============================
FROM base AS builder

# Copiar arquivos de configuraÃ§Ã£o
COPY package.json package-lock.json* ./
COPY tsconfig.json ./
COPY prisma ./prisma/

# Instalar todas as dependÃªncias (incluindo devDependencies)
RUN npm ci

# Copiar cÃ³digo fonte
COPY src ./src/

# Gerar o Prisma Client
RUN npx prisma generate

# Build da aplicaÃ§Ã£o
RUN npm run build

# ===============================
# EstÃ¡gio de produÃ§Ã£o
# ===============================
FROM base AS production

# Criar usuÃ¡rio nÃ£o-root para seguranÃ§a
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nodeuser

# Copiar dependÃªncias de produÃ§Ã£o
COPY --from=deps --chown=nodeuser:nodejs /app/node_modules ./node_modules

# Copiar arquivos do Prisma
COPY --from=builder --chown=nodeuser:nodejs /app/prisma ./prisma/

# Copiar aplicaÃ§Ã£o buildada
COPY --from=builder --chown=nodeuser:nodejs /app/build ./build/

# Copiar package.json para ter acesso aos scripts
COPY --chown=nodeuser:nodejs package.json ./

# Garantir permissÃµes corretas antes de gerar o Prisma Client
RUN chown -R nodeuser:nodejs /app/node_modules
RUN chmod -R 755 /app/node_modules

# Gerar o Prisma Client para produÃ§Ã£o
RUN npx prisma generate

# Mudar para usuÃ¡rio nÃ£o-root
USER nodeuser

# Expor a porta que a aplicaÃ§Ã£o usa
EXPOSE 3333

# VariÃ¡veis de ambiente padrÃ£o
ENV NODE_ENV=production
ENV PORT=3333

# Script de inicializaÃ§Ã£o que executa migrations e inicia a aplicaÃ§Ã£o
RUN echo '#!/bin/sh\n\
set -e\n\
\n\
echo "ðŸ”„ Aguardando PostgreSQL ficar disponÃ­vel..."\n\
until pg_isready -h postgres -p 5432 -U $POSTGRES_USER 2>/dev/null; do\n\
  echo "Aguardando database..."\n\
  sleep 2\n\
done\n\
\n\
echo "ðŸ”„ Verificando se as migraÃ§Ãµes sÃ£o necessÃ¡rias..."\n\
if npx prisma migrate status | grep -q "Database schema is not up to date"; then\n\
  echo "ðŸ”„ Executando migrations do Prisma..."\n\
  npx prisma migrate deploy\n\
else\n\
  echo "âœ… Database jÃ¡ estÃ¡ atualizado com as migraÃ§Ãµes"\n\
fi\n\
\n\
echo "ðŸ”„ Sincronizando schema do Prisma..."\n\
npx prisma db push --accept-data-loss || echo "Schema jÃ¡ estÃ¡ sincronizado"\n\
\n\
echo "ðŸš€ Iniciando aplicaÃ§Ã£o..."\n\
exec npm start' > /app/start.sh

# Tornar o script executÃ¡vel e ajustar permissÃµes
RUN chmod +x /app/start.sh && chown nodeuser:nodejs /app/start.sh

# Comando de inicializaÃ§Ã£o
CMD ["/app/start.sh"]

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:${PORT}/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"
